namespace com.ibm.streamsx.metrics.sample.test;

use com.ibm.streamsx.metrics::MetricsSource;

/**
 * Several numbers that are created by the Beacon and stored in metrics.
 */
type Numbers_t = tuple<
	int64 incrementingNumber,
	int64 randomNumber
>;

type Notification_t = tuple<
	rstring domainName,
	rstring instanceName,
	int64 jobId,
	rstring jobName,
	rstring operatorName,
	rstring metricName,
	int64 metricValue
>;

/**
 * Create the custom application metrics. The function is usable in the state
 * logic of an operator.
 */
stateful boolean createMetrics() {
	createCustomMetric("inc", "The incrementing number.", Sys.Counter, 0l);
	createCustomMetric("rnd", "The random number.", Sys.Counter, 0l);
	return true;
}

/**
 * Set the custom application metrics.
 * 
 * @param numbers
 * Specifies the numbers that are created by the Beacon operator.
 */
stateful void setMetrics(Numbers_t numbers) {
	setCustomMetricValue("inc", numbers.incrementingNumber);
	setCustomMetricValue("rnd", numbers.randomNumber);
}

/**
 * This test application for the [com.ibm.streamsx.metrics::MetricsSource]
 * operator creates incrementing and random numbers that are stored in
 * metrics. The MetricsSource operator reports them.
 */
composite Main {
	graph
		// *********************************************************************
		// Data Generator
		// *********************************************************************

		/*
		 * The Beacon generates incrementing and random numbers.
		 */
		stream<Numbers_t> Numbers as O = Beacon() {
			param period: 5.0;
			output O:
				incrementingNumber = (int64)IterationCount(),
				randomNumber = (int64)(random() * 1000.0);
		}
		
		/*
		 * The Custom stores the received numbers in metrics.
		 */
		() as Storage = Custom(Numbers as I) {
			logic
			state: {
				boolean created = createMetrics();
			}
			onTuple I: {
				setMetrics(I);
			}
		}
		
		/*
		 * The Custom traces the generated values.
		 */
		() as NumbersTracer = Custom(Numbers as I) {
			logic
			onTuple I: {
				appTrc(Trace.error, "Numbers: " + (rstring)I);
			}
			onPunct I: {
				appTrc(Trace.error, "Numbers: " + (rstring)currentPunct());
			}
		}

		// *********************************************************************
		// MetricsSource
		// *********************************************************************

		/*
		 * The MetricsSource generates a tuple for each notified metric value
		 * change.
		 */
		stream<Notification_t> Notifications as O = MetricsSource() {
			param
				connectionURL: getSubmissionTimeValue("connectionURL");
//				connectionURL: "service:jmx:jmxmp://" + getHostName() + ":9975";
				user: getSubmissionTimeValue("user");
				password: getSubmissionTimeValue("password");
				domain: getSubmissionTimeValue("domain");
				scanPeriod: (float64)getSubmissionTimeValue("scanPeriod", "5.0");
				filterDocument: dataDirectory() + "/filters.json";
		}
		
		/*
		 * The Custom traces the received metric value change notifications.
		 */
		() as NotificationTracer = Custom(Notifications as I) {
			logic
			onTuple I: {
				appTrc(Trace.error, "Notification: " + (rstring)I);
			}
			onPunct I: {
				appTrc(Trace.error, "Notification: " + (rstring)currentPunct());
			}
		}
}
